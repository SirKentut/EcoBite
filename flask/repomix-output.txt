This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
services/
  density_service.py
.gitignore
app.py

================================================================
Files
================================================================

================
File: services/density_service.py
================
from flask import Blueprint, jsonify, request
from openai import OpenAI
import os

# Create blueprint for density service
density = Blueprint('density', __name__)

# Initialize Perplexity client
client = OpenAI(
    api_key=os.getenv('PERPLEXITY_API_KEY'),
    base_url="https://api.perplexity.ai"
)

def get_density(food_name):
    """Query Perplexity API for food density."""
    messages = [
        {
            "role": "system",
            "content": (
                "You are a precise scientific assistant. When asked about food density, "
                "respond only with the numerical value in g/ml. If uncertain, respond with your best estimation."
            ),
        },
        {
            "role": "user",
            "content": f"What is the density of {food_name} in g/ml? Give me only the number and that is it."
        },
    ]
    
    try:
        response = client.chat.completions.create(
            model="sonar-pro",
            messages=messages,
        )
        
        # Extract the density value
        density_str = response.choices[0].message.content.strip()
        try:
            density = float(density_str)
            return density
        except ValueError:
            return None
            
    except Exception as e:
        print(f"Error getting density for {food_name}: {str(e)}")
        return None

@density.route('/process-foods', methods=['POST'])
def process_foods():
    if not request.is_json:
        return jsonify({'error': 'Content-Type must be application/json'}), 400
    
    data = request.get_json()
    
    # Validate the request contains a list of foods
    if not isinstance(data, dict) or 'foods' not in data:
        return jsonify({'error': 'Request must include a "foods" list'}), 400
    
    foods = data['foods']
    if not isinstance(foods, list):
        return jsonify({'error': 'Foods must be a list'}), 400
        
    # Process each food item
    processed_foods = []
    for food in foods:
        if not isinstance(food, dict) or 'name' not in food:
            continue
            
        # Get the density for the food using Perplexity Search    
        density_value = get_density(food['name'])
        
        processed_foods.append({
            "food_name": food['name'],
            "density": density_value
        })
    
    return jsonify({
        'foods': processed_foods
    })

================
File: .gitignore
================
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.env
*.pyc

================
File: app.py
================
# app.py

from flask import Flask, jsonify, request
from datetime import datetime
from services.density_service import density
import logging

from dotenv import load_dotenv
load_dotenv() 

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)

# Register the blueprint
app.register_blueprint(density, url_prefix='/density')

# Basic error handling
class APIError(Exception):
    """Base class for API errors"""
    def __init__(self, message, status_code=400):
        super().__init__()
        self.message = message
        self.status_code = status_code

@app.errorhandler(APIError)
def handle_api_error(error):
    response = jsonify({'error': error.message})
    response.status_code = error.status_code
    return response

# Routes
@app.route('/')
def home():
    return jsonify({
        'message': 'Welcome to the Flask API for Food Density Service.',
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/echo', methods=['POST'])
def echo():
    if not request.is_json:
        raise APIError('Content-Type must be application/json')
    
    data = request.get_json()
    return jsonify({
        'message': 'Echo response',
        'data': data,
        'timestamp': datetime.now().isoformat()
    })

# Health check endpoint
@app.route('/health')
def health_check():
    return jsonify({
        'status': 'Healthy: TreeHacks 2025',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    # Enable hot reloading and run on localhost
    app.run(host='0.0.0.0', port=5000, debug=True)



================================================================
End of Codebase
================================================================
